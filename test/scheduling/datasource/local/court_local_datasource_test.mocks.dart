// Mocks generated by Mockito 5.4.5 from annotations
// in tennis_court_scheduling/test/scheduling/datasource/local/court_local_datasource_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tennis_court_scheduling/scheduling/datasource/db/db.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IBaseDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIBaseDatabase extends _i1.Mock implements _i2.IBaseDatabase {
  MockIBaseDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> create({
    required String? table,
    required _i2.MapWithId? mapWithId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#create, [], {
              #table: table,
              #mapWithId: mapWithId,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> delete({required String? table, required String? id}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#table: table, #id: id}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMultiple({
    required String? table,
    required Iterable<String>? ids,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMultiple, [], {#table: table, #ids: ids}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> dropTable({required String? table}) =>
      (super.noSuchMethod(
            Invocation.method(#dropTable, [], {#table: table}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>?> read({
    required String? table,
    required String? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#read, [], {#table: table, #id: id}),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<List<Map<String, dynamic>>> readAll({required String? table}) =>
      (super.noSuchMethod(
            Invocation.method(#readAll, [], {#table: table}),
            returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<Map<String, dynamic>?> readWhere({
    required String? table,
    required String? field,
    required String? value,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readWhere, [], {
              #table: table,
              #field: field,
              #value: value,
            }),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);
}
